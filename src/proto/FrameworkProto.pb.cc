// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameworkProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FrameworkProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zmf {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SenderId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderId_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateBroadcast_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FrameworkProto_2eproto() {
  protobuf_AddDesc_FrameworkProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FrameworkProto.proto");
  GOOGLE_CHECK(file != NULL);
  SenderId_descriptor_ = file->message_type(0);
  static const int SenderId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderId, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderId, instanceid_),
  };
  SenderId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderId_descriptor_,
      SenderId::default_instance_,
      SenderId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderId));
  StateBroadcast_descriptor_ = file->message_type(1);
  static const int StateBroadcast_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, zmqpubport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, zmqrepport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, lifecyclestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, additionallifecycleinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, additionalstateinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, multicastidentifier_),
  };
  StateBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateBroadcast_descriptor_,
      StateBroadcast::default_instance_,
      StateBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateBroadcast));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FrameworkProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderId_descriptor_, &SenderId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateBroadcast_descriptor_, &StateBroadcast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FrameworkProto_2eproto() {
  delete SenderId::default_instance_;
  delete SenderId_reflection_;
  delete StateBroadcast::default_instance_;
  delete StateBroadcast_reflection_;
}

void protobuf_AddDesc_FrameworkProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FrameworkProto.proto\022\tzmf.proto\".\n\010Sen"
    "derId\022\016\n\006typeId\030\001 \002(\r\022\022\n\ninstanceId\030\002 \002("
    "\004\"\371\001\n\016StateBroadcast\022\022\n\nzmqPubPort\030\001 \002(\r"
    "\022\022\n\nzmqRepPort\030\002 \002(\r\022%\n\010senderId\030\003 \002(\0132\023"
    ".zmf.proto.SenderId\022\022\n\nsenderName\030\004 \002(\t\022"
    "\017\n\007version\030\005 \002(\r\022\026\n\016lifecycleState\030\006 \002(\r"
    "\022 \n\030additionalLifecycleInfos\030\007 \001(\r\022\034\n\024ad"
    "ditionalStateInfos\030\010 \001(\014\022\033\n\023multicastIde"
    "ntifier\030\t \002(\rB\033\n\tjmf.protoB\016FrameworkPro"
    "to", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameworkProto.proto", &protobuf_RegisterTypes);
  SenderId::default_instance_ = new SenderId();
  StateBroadcast::default_instance_ = new StateBroadcast();
  SenderId::default_instance_->InitAsDefaultInstance();
  StateBroadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FrameworkProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FrameworkProto_2eproto {
  StaticDescriptorInitializer_FrameworkProto_2eproto() {
    protobuf_AddDesc_FrameworkProto_2eproto();
  }
} static_descriptor_initializer_FrameworkProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SenderId::kTypeIdFieldNumber;
const int SenderId::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

SenderId::SenderId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zmf.proto.SenderId)
}

void SenderId::InitAsDefaultInstance() {
}

SenderId::SenderId(const SenderId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zmf.proto.SenderId)
}

void SenderId::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderId::~SenderId() {
  // @@protoc_insertion_point(destructor:zmf.proto.SenderId)
  SharedDtor();
}

void SenderId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SenderId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderId_descriptor_;
}

const SenderId& SenderId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameworkProto_2eproto();
  return *default_instance_;
}

SenderId* SenderId::default_instance_ = NULL;

SenderId* SenderId::New() const {
  return new SenderId;
}

void SenderId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SenderId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceid_, typeid__);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zmf.proto.SenderId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required uint64 instanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zmf.proto.SenderId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zmf.proto.SenderId)
  return false;
#undef DO_
}

void SenderId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zmf.proto.SenderId)
  // required uint32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typeid_(), output);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zmf.proto.SenderId)
}

::google::protobuf::uint8* SenderId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zmf.proto.SenderId)
  // required uint32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typeid_(), target);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zmf.proto.SenderId)
  return target;
}

int SenderId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typeid_());
    }

    // required uint64 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderId::MergeFrom(const SenderId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderId::CopyFrom(const SenderId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SenderId::Swap(SenderId* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderId_descriptor_;
  metadata.reflection = SenderId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateBroadcast::kZmqPubPortFieldNumber;
const int StateBroadcast::kZmqRepPortFieldNumber;
const int StateBroadcast::kSenderIdFieldNumber;
const int StateBroadcast::kSenderNameFieldNumber;
const int StateBroadcast::kVersionFieldNumber;
const int StateBroadcast::kLifecycleStateFieldNumber;
const int StateBroadcast::kAdditionalLifecycleInfosFieldNumber;
const int StateBroadcast::kAdditionalStateInfosFieldNumber;
const int StateBroadcast::kMulticastIdentifierFieldNumber;
#endif  // !_MSC_VER

StateBroadcast::StateBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zmf.proto.StateBroadcast)
}

void StateBroadcast::InitAsDefaultInstance() {
  senderid_ = const_cast< ::zmf::proto::SenderId*>(&::zmf::proto::SenderId::default_instance());
}

StateBroadcast::StateBroadcast(const StateBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zmf.proto.StateBroadcast)
}

void StateBroadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zmqpubport_ = 0u;
  zmqrepport_ = 0u;
  senderid_ = NULL;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  lifecyclestate_ = 0u;
  additionallifecycleinfos_ = 0u;
  additionalstateinfos_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multicastidentifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateBroadcast::~StateBroadcast() {
  // @@protoc_insertion_point(destructor:zmf.proto.StateBroadcast)
  SharedDtor();
}

void StateBroadcast::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (additionalstateinfos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalstateinfos_;
  }
  if (this != default_instance_) {
    delete senderid_;
  }
}

void StateBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateBroadcast_descriptor_;
}

const StateBroadcast& StateBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FrameworkProto_2eproto();
  return *default_instance_;
}

StateBroadcast* StateBroadcast::default_instance_ = NULL;

StateBroadcast* StateBroadcast::New() const {
  return new StateBroadcast;
}

void StateBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StateBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zmqpubport_, zmqrepport_);
    ZR_(version_, lifecyclestate_);
    if (has_senderid()) {
      if (senderid_ != NULL) senderid_->::zmf::proto::SenderId::Clear();
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendername_->clear();
      }
    }
    additionallifecycleinfos_ = 0u;
    if (has_additionalstateinfos()) {
      if (additionalstateinfos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalstateinfos_->clear();
      }
    }
  }
  multicastidentifier_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zmf.proto.StateBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zmqPubPort = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zmqpubport_)));
          set_has_zmqpubport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zmqRepPort;
        break;
      }

      // required uint32 zmqRepPort = 2;
      case 2: {
        if (tag == 16) {
         parse_zmqRepPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zmqrepport_)));
          set_has_zmqrepport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderId;
        break;
      }

      // required .zmf.proto.SenderId senderId = 3;
      case 3: {
        if (tag == 26) {
         parse_senderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senderid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_senderName;
        break;
      }

      // required string senderName = 4;
      case 4: {
        if (tag == 34) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // required uint32 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lifecycleState;
        break;
      }

      // required uint32 lifecycleState = 6;
      case 6: {
        if (tag == 48) {
         parse_lifecycleState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifecyclestate_)));
          set_has_lifecyclestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_additionalLifecycleInfos;
        break;
      }

      // optional uint32 additionalLifecycleInfos = 7;
      case 7: {
        if (tag == 56) {
         parse_additionalLifecycleInfos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additionallifecycleinfos_)));
          set_has_additionallifecycleinfos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_additionalStateInfos;
        break;
      }

      // optional bytes additionalStateInfos = 8;
      case 8: {
        if (tag == 66) {
         parse_additionalStateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additionalstateinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_multicastIdentifier;
        break;
      }

      // required uint32 multicastIdentifier = 9;
      case 9: {
        if (tag == 72) {
         parse_multicastIdentifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multicastidentifier_)));
          set_has_multicastidentifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zmf.proto.StateBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zmf.proto.StateBroadcast)
  return false;
#undef DO_
}

void StateBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zmf.proto.StateBroadcast)
  // required uint32 zmqPubPort = 1;
  if (has_zmqpubport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zmqpubport(), output);
  }

  // required uint32 zmqRepPort = 2;
  if (has_zmqrepport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zmqrepport(), output);
  }

  // required .zmf.proto.SenderId senderId = 3;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->senderid(), output);
  }

  // required string senderName = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sendername(), output);
  }

  // required uint32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // required uint32 lifecycleState = 6;
  if (has_lifecyclestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lifecyclestate(), output);
  }

  // optional uint32 additionalLifecycleInfos = 7;
  if (has_additionallifecycleinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->additionallifecycleinfos(), output);
  }

  // optional bytes additionalStateInfos = 8;
  if (has_additionalstateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->additionalstateinfos(), output);
  }

  // required uint32 multicastIdentifier = 9;
  if (has_multicastidentifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multicastidentifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zmf.proto.StateBroadcast)
}

::google::protobuf::uint8* StateBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zmf.proto.StateBroadcast)
  // required uint32 zmqPubPort = 1;
  if (has_zmqpubport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zmqpubport(), target);
  }

  // required uint32 zmqRepPort = 2;
  if (has_zmqrepport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zmqrepport(), target);
  }

  // required .zmf.proto.SenderId senderId = 3;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->senderid(), target);
  }

  // required string senderName = 4;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendername(), target);
  }

  // required uint32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // required uint32 lifecycleState = 6;
  if (has_lifecyclestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lifecyclestate(), target);
  }

  // optional uint32 additionalLifecycleInfos = 7;
  if (has_additionallifecycleinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->additionallifecycleinfos(), target);
  }

  // optional bytes additionalStateInfos = 8;
  if (has_additionalstateinfos()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->additionalstateinfos(), target);
  }

  // required uint32 multicastIdentifier = 9;
  if (has_multicastidentifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multicastidentifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zmf.proto.StateBroadcast)
  return target;
}

int StateBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zmqPubPort = 1;
    if (has_zmqpubport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zmqpubport());
    }

    // required uint32 zmqRepPort = 2;
    if (has_zmqrepport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zmqrepport());
    }

    // required .zmf.proto.SenderId senderId = 3;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senderid());
    }

    // required string senderName = 4;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // required uint32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 lifecycleState = 6;
    if (has_lifecyclestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifecyclestate());
    }

    // optional uint32 additionalLifecycleInfos = 7;
    if (has_additionallifecycleinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additionallifecycleinfos());
    }

    // optional bytes additionalStateInfos = 8;
    if (has_additionalstateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additionalstateinfos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 multicastIdentifier = 9;
    if (has_multicastidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multicastidentifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateBroadcast::MergeFrom(const StateBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zmqpubport()) {
      set_zmqpubport(from.zmqpubport());
    }
    if (from.has_zmqrepport()) {
      set_zmqrepport(from.zmqrepport());
    }
    if (from.has_senderid()) {
      mutable_senderid()->::zmf::proto::SenderId::MergeFrom(from.senderid());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_lifecyclestate()) {
      set_lifecyclestate(from.lifecyclestate());
    }
    if (from.has_additionallifecycleinfos()) {
      set_additionallifecycleinfos(from.additionallifecycleinfos());
    }
    if (from.has_additionalstateinfos()) {
      set_additionalstateinfos(from.additionalstateinfos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multicastidentifier()) {
      set_multicastidentifier(from.multicastidentifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateBroadcast::CopyFrom(const StateBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  if (has_senderid()) {
    if (!this->senderid().IsInitialized()) return false;
  }
  return true;
}

void StateBroadcast::Swap(StateBroadcast* other) {
  if (other != this) {
    std::swap(zmqpubport_, other->zmqpubport_);
    std::swap(zmqrepport_, other->zmqrepport_);
    std::swap(senderid_, other->senderid_);
    std::swap(sendername_, other->sendername_);
    std::swap(version_, other->version_);
    std::swap(lifecyclestate_, other->lifecyclestate_);
    std::swap(additionallifecycleinfos_, other->additionallifecycleinfos_);
    std::swap(additionalstateinfos_, other->additionalstateinfos_);
    std::swap(multicastidentifier_, other->multicastidentifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateBroadcast_descriptor_;
  metadata.reflection = StateBroadcast_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zmf

// @@protoc_insertion_point(global_scope)
